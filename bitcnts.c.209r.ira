
;; Function main1 (main1, funcdef_no=2, decl_uid=3622, cgraph_uid=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 18 count 15 (    1)
Building IRA IR
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 77.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r78: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r78,l0) best DREG, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r76,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r75,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r74: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r74,l0) best DIREG, allocno GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r73,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r72,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r70: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r70,l0) best AREG, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r68,l0) best AREG, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r66,l0) best SIREG, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r64,l0) best AREG, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r61,l0) best DIREG, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r59,l0) best CREG, allocno GENERAL_REGS

  a0(r68,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r67,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r66,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r78,l0) costs: AREG:0 DREG:-1 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r76,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a5(r77,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a6(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a7(r75,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a8(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a9(r64,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a10(r63,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a11(r74,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a12(r72,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a13(r73,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a14(r71,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a15(r70,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8
  a16(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a17(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a18(r69,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a19(r59,l0) costs: AREG:0 DREG:0 CREG:-1 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7

   Insn 97(l0): point = 0
   Insn 94(l0): point = 2
   Insn 90(l0): point = 4
   Insn 87(l0): point = 6
   Insn 102(l0): point = 9
   Insn 43(l0): point = 11
   Insn 42(l0): point = 13
   Insn 41(l0): point = 15
   Insn 40(l0): point = 17
   Insn 85(l0): point = 20
   Insn 84(l0): point = 22
   Insn 80(l0): point = 25
   Insn 67(l0): point = 28
   Insn 66(l0): point = 30
   Insn 64(l0): point = 33
   Insn 63(l0): point = 35
   Insn 61(l0): point = 37
   Insn 60(l0): point = 39
   Insn 57(l0): point = 42
   Insn 56(l0): point = 44
   Insn 55(l0): point = 46
   Insn 54(l0): point = 48
   Insn 53(l0): point = 50
   Insn 52(l0): point = 52
   Insn 51(l0): point = 54
   Insn 50(l0): point = 56
   Insn 49(l0): point = 58
   Insn 48(l0): point = 60
   Insn 47(l0): point = 62
   Insn 77(l0): point = 65
   Insn 76(l0): point = 67
   Insn 75(l0): point = 69
   Insn 74(l0): point = 71
   Insn 73(l0): point = 73
   Insn 72(l0): point = 75
   Insn 71(l0): point = 77
   Insn 70(l0): point = 79
   Insn 69(l0): point = 81
   Insn 100(l0): point = 84
   Insn 36(l0): point = 86
   Insn 33(l0): point = 89
   Insn 32(l0): point = 91
   Insn 30(l0): point = 94
   Insn 29(l0): point = 96
   Insn 28(l0): point = 98
   Insn 27(l0): point = 100
   Insn 26(l0): point = 102
   Insn 25(l0): point = 104
   Insn 24(l0): point = 106
   Insn 23(l0): point = 108
   Insn 22(l0): point = 110
   Insn 18(l0): point = 113
   Insn 17(l0): point = 115
   Insn 16(l0): point = 117
   Insn 15(l0): point = 119
   Insn 14(l0): point = 121
   Insn 13(l0): point = 123
   Insn 12(l0): point = 125
   Insn 11(l0): point = 127
   Insn 9(l0): point = 130
   Insn 8(l0): point = 132
   Insn 4(l0): point = 134
   Insn 3(l0): point = 136
   Insn 2(l0): point = 138
 a0(r68): [3..4]
 a1(r67): [5..6]
 a2(r66): [72..77]
 a3(r78): [74..75]
 a4(r76): [78..79]
 a5(r77): [80..81]
 a6(r62): [36..37]
 a7(r75): [38..39]
 a8(r65): [47..48]
 a9(r64): [49..50]
 a10(r63): [53..58]
 a11(r74): [55..56]
 a12(r72): [59..60]
 a13(r73): [61..62]
 a14(r71): [14..15]
 a15(r70): [99..100]
 a16(r61): [105..106]
 a17(r60): [107..108]
 a18(r69): [109..110]
 a19(r59): [126..127]
Compressing live ranges: from 141 to 36 - 25%
Ranges after the compression:
 a0(r68): [0..1]
 a1(r67): [2..3]
 a2(r66): [20..21]
 a3(r78): [20..21]
 a4(r76): [22..23]
 a5(r77): [24..25]
 a6(r62): [6..7]
 a7(r75): [8..9]
 a8(r65): [10..11]
 a9(r64): [12..13]
 a10(r63): [14..15]
 a11(r74): [14..15]
 a12(r72): [16..17]
 a13(r73): [18..19]
 a14(r71): [4..5]
 a15(r70): [26..27]
 a16(r61): [28..29]
 a17(r60): [30..31]
 a18(r69): [32..33]
 a19(r59): [34..35]
  regions=1, blocks=15, points=36
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   19:r59  l0     0   17:r60  l0     0   16:r61  l0     0    6:r62  l0     0
   10:r63  l0     0    9:r64  l0     0    8:r65  l0     0    2:r66  l0     0
    1:r67  l0     0    0:r68  l0     0   18:r69  l0     0   15:r70  l0     0
   14:r71  l0     0   12:r72  l0     0   13:r73  l0     0   11:r74  l0     1
    7:r75  l0     0    4:r76  l0     0    5:r77  l0     0    3:r78  l0     1
+++Costs: overall -8, reg -8, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,5u} r1={9d,3u} r2={8d,1u} r4={9d,3u} r5={13d,7u} r6={1d,14u} r7={1d,20u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,13u} r17={16d,5u} r18={6d} r19={6d} r20={1d,42u,1e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} r70={1d,1u} r71={1d,1u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} 
;;    total ref usage 460{326d,133u,1e} in 64{58 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) bitcnts.c:22 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ argc ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) bitcnts.c:22 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ argv ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
        (reg:SI 1 dx [ print ])) bitcnts.c:22 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ print ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) bitcnts.c:50 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) bitcnts.c:50 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 20)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 59 [ stderr.0 ])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fca3b32d980 stderr>) [0 stderr+0 S8 A64])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg:DI 2 cx)
        (reg/f:DI 59 [ stderr.0 ])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ stderr.0 ])
        (nil)))
(insn 13 12 14 3 (set (reg:DI 1 dx)
        (const_int 28 [0x1c])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 3 (set (reg:DI 4 si)
        (const_int 1 [0x1])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fca3b040558 *.LC0>)) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(call_insn 16 15 17 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fca3b265a00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) bitcnts.c:51 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 17 16 18 3 (set (reg:SI 5 di)
        (const_int 1 [0x1])) bitcnts.c:52 89 {*movsi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fca3b279f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) bitcnts.c:52 656 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 69 70
(code_label 20 19 21 4 2 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 69)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg/f:DI 60 [ D.3671 ])
                (plus:DI (reg/f:DI 69)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:54 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 69)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 24 23 25 4 (set (reg/f:DI 61 [ D.3672 ])
        (mem/f:DI (reg/f:DI 60 [ D.3671 ]) [0 *_8+0 S8 A64])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 60 [ D.3671 ])
        (nil)))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg/f:DI 61 [ D.3672 ])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 61 [ D.3672 ])
        (nil)))
(call_insn/i 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fca3b35fe00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) bitcnts.c:54 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 4 (set (reg:SI 70)
        (reg:SI 0 ax)) bitcnts.c:54 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 28 27 29 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])
        (reg:SI 70)) bitcnts.c:54 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 70)
        (nil)))
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:56 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) bitcnts.c:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fca3b0405f0 *.LC1>)) bitcnts.c:57 87 {*movdi_internal_rex64}
     (nil))
(call_insn 33 32 34 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fca3b267700 puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) bitcnts.c:57 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 34 33 35 6 3 "" [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 100 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:59 89 {*movsi_internal}
     (nil))
(jump_insn 100 36 101 6 (set (pc)
        (label_ref 81)) bitcnts.c:59 650 {jump}
     (nil)
 -> 81)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 101 100 83)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 71
(code_label 83 101 39 7 8 "" [1 uses])
(note 39 83 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
        (const_int 0 [0])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 7 (set (reg:DI 71)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 7 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
        (reg:DI 71)) bitcnts.c:65 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 71)
        (nil)))
(insn 43 42 102 7 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
        (const_int 1 [0x1])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 102 43 103 7 (set (pc)
        (label_ref 58)) bitcnts.c:65 650 {jump}
     (nil)
 -> 58)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 103 102 62)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 64 65 72 73 74
(code_label 62 103 46 8 6 "" [1 uses])
(note 46 62 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 8 (set (reg:SI 73)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:66 89 {*movsi_internal}
     (nil))
(insn 48 47 49 8 (set (reg:DI 72)
        (sign_extend:DI (reg:SI 73))) bitcnts.c:66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 73)
        (nil)))
(insn 49 48 50 8 (set (reg/f:DI 63 [ D.3674 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 72)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("pBitCntFunc.3630") [flags 0x2]  <var_decl 0x7fca3b02e5f0 pBitCntFunc>)) [0 pBitCntFunc S8 A64])) bitcnts.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 72)
        (nil)))
(insn 50 49 51 8 (set (reg:DI 74)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])) bitcnts.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 8 (set (reg:DI 5 di)
        (reg:DI 74)) bitcnts.c:66 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 74)
        (nil)))
(call_insn 52 51 53 8 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:DI 63 [ D.3674 ]) [0 *_17 S1 A8])
            (const_int 0 [0]))) bitcnts.c:66 663 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 63 [ D.3674 ])
        (expr_list:REG_DEAD (reg:DI 5 di)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 8 (set (reg:SI 64 [ D.3675 ])
        (reg:SI 0 ax)) bitcnts.c:66 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 54 53 55 8 (set (reg:DI 65 [ D.3673 ])
        (sign_extend:DI (reg:SI 64 [ D.3675 ]))) bitcnts.c:66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 64 [ D.3675 ])
        (nil)))
(insn 55 54 56 8 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                    (reg:DI 65 [ D.3673 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:66 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.3673 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 56 55 57 8 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 57 56 58 8 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 75
(code_label 58 57 59 9 5 "" [1 uses])
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg:SI 75)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])) bitcnts.c:65 89 {*movsi_internal}
     (nil))
(insn 61 60 63 9 (set (reg:DI 62 [ D.3673 ])
        (sign_extend:DI (reg:SI 75))) bitcnts.c:65 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 75)
        (nil)))
(insn 63 61 64 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 62 [ D.3673 ])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64]))) bitcnts.c:65 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 62 [ D.3673 ])
        (nil)))
(jump_insn 64 63 65 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) bitcnts.c:65 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 62)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 65 64 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 67 66 68 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) bitcnts.c:82 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 76 77 78
(note 68 67 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:83 89 {*movsi_internal}
     (nil))
(insn 70 69 71 11 (set (reg:DI 76)
        (sign_extend:DI (reg:SI 77))) bitcnts.c:83 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 77)
        (nil)))
(insn 71 70 72 11 (set (reg/f:DI 66 [ D.3672 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 76)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("text.3631") [flags 0x2]  <var_decl 0x7fca3b02e688 text>)) [0 text S8 A64])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 76)
        (nil)))
(insn 72 71 73 11 (set (reg:DI 78)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 11 (set (reg:DI 1 dx)
        (reg:DI 78)) bitcnts.c:83 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 78)
        (nil)))
(insn 74 73 75 11 (set (reg:DI 4 si)
        (reg/f:DI 66 [ D.3672 ])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ D.3672 ])
        (nil)))
(insn 75 74 76 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fca3b040688 *.LC2>)) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) bitcnts.c:83 91 {*movqi_internal}
     (nil))
(call_insn 77 76 78 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fca3b265f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) bitcnts.c:83 663 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 78 77 79 12 7 "" [1 uses])
(note 79 78 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:59 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 81 80 82 13 4 "" [1 uses])
(note 82 81 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) bitcnts.c:59 7 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) bitcnts.c:59 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 83)
;;  succ:       7
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 67 68
(note 86 85 87 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 90 14 (set (reg:SI 67 [ D.3675 ])
        (const_int 0 [0])) bitcnts.c:89 89 {*movsi_internal}
     (nil))
(insn 90 87 94 14 (set (reg:SI 68 [ <retval> ])
        (reg:SI 67 [ D.3675 ])) bitcnts.c:89 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 67 [ D.3675 ])
        (nil)))
(insn 94 90 97 14 (set (reg/i:SI 0 ax)
        (reg:SI 68 [ <retval> ])) bitcnts.c:90 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 68 [ <retval> ])
        (nil)))
(insn 97 94 0 14 (use (reg/i:SI 0 ax)) bitcnts.c:90 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function bit_shifter (bit_shifter, funcdef_no=3, decl_uid=3618, cgraph_uid=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r63,l0) best AREG, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r60,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r59,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r63,l0) costs: AREG:-1 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a1(r62,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a2(r59,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a3(r61,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a4(r60,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:7
  a5(r65,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 MEM:7
  a6(r64,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:26 SSE_REGS:26 MMX_REGS:26 FP_TOP_SSE_REGS:131070 FP_SECOND_SSE_REGS:131070 FLOAT_SSE_REGS:131070 FLOAT_INT_REGS:131070 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:131070 ALL_REGS:131070 MEM:8

   Insn 39(l0): point = 0
   Insn 36(l0): point = 2
   Insn 32(l0): point = 4
   Insn 29(l0): point = 6
   Insn 17(l0): point = 9
   Insn 16(l0): point = 11
   Insn 15(l0): point = 13
   Insn 14(l0): point = 15
   Insn 13(l0): point = 17
   Insn 12(l0): point = 19
   Insn 26(l0): point = 22
   Insn 25(l0): point = 24
   Insn 23(l0): point = 26
   Insn 21(l0): point = 29
   Insn 20(l0): point = 31
   Insn 42(l0): point = 34
   Insn 8(l0): point = 36
   Insn 7(l0): point = 38
   Insn 6(l0): point = 40
   Insn 2(l0): point = 42
 a0(r63): [3..4]
 a1(r62): [5..6]
 a2(r59): [25..26]
 a3(r61): [14..15]
 a4(r60): [16..17]
 a5(r65): [18..19]
 a6(r64): [37..38]
Compressing live ranges: from 45 to 14 - 31%
Ranges after the compression:
 a0(r63): [0..1]
 a1(r62): [2..3]
 a2(r59): [10..11]
 a3(r61): [4..5]
 a4(r60): [6..7]
 a5(r65): [8..9]
 a6(r64): [12..13]
  regions=1, blocks=7, points=14
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7
Disposition:
    2:r59  l0     0    4:r60  l0     0    3:r61  l0     0    1:r62  l0     0
    0:r63  l0     0    6:r64  l0     0    5:r65  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bit_shifter

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,6u} r7={1d,6u} r16={1d,5u} r17={6d,2u} r20={1d,20u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={1d,1u} r60={1d,1u} r61={1d,1u} r62={1d,1u} r63={1d,1u} r64={1d,1u} r65={1d,1u} 
;;    total ref usage 82{33d,49u,0e} in 20{20 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 64
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) bitcnts.c:93 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ x ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 64)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 8 7 42 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (reg:SI 64)) bitcnts.c:96 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 64)
        (nil)))
(jump_insn 42 8 43 2 (set (pc)
        (label_ref 18)) bitcnts.c:96 650 {jump}
     (nil)
 -> 18)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 43 42 24)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 65
(code_label 24 43 11 3 13 "" [1 uses])
(note 11 24 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:DI 65)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) bitcnts.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 3 (set (reg:SI 60 [ D.3679 ])
        (subreg:SI (reg:DI 65) 0)) bitcnts.c:97 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 65)
        (nil)))
(insn 14 13 15 3 (parallel [
            (set (reg:SI 61 [ D.3679 ])
                (and:SI (reg:SI 60 [ D.3679 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 393 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 60 [ D.3679 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                    (reg:SI 61 [ D.3679 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 61 [ D.3679 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                (ashiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 548 {*ashrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 18 17 19 4 11 "" [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) bitcnts.c:96 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) bitcnts.c:96 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 25 5 (set (reg:SI 59 [ i.1 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 25 23 26 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 59 [ i.1 ])
            (const_int 63 [0x3f]))) bitcnts.c:96 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 59 [ i.1 ])
        (nil)))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) bitcnts.c:96 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 24)
;;  succ:       3
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 62 63
(code_label 27 26 28 6 12 "" [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 32 6 (set (reg:SI 62 [ D.3679 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:98 89 {*movsi_internal}
     (nil))
(insn 32 29 36 6 (set (reg:SI 63 [ <retval> ])
        (reg:SI 62 [ D.3679 ])) bitcnts.c:98 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 62 [ D.3679 ])
        (nil)))
(insn 36 32 39 6 (set (reg/i:SI 0 ax)
        (reg:SI 63 [ <retval> ])) bitcnts.c:99 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 63 [ <retval> ])
        (nil)))
(insn 39 36 0 6 (use (reg/i:SI 0 ax)) bitcnts.c:99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

