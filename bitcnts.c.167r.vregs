
;; Function main1 (main1, funcdef_no=2, decl_uid=3622, cgraph_uid=2)

(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) bitcnts.c:22 89 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) bitcnts.c:22 87 {*movdi_internal_rex64}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
        (reg:SI 1 dx [ print ])) bitcnts.c:22 89 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) bitcnts.c:50 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) bitcnts.c:50 612 {*jcc_1}
     (nil)
 -> 20)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg/f:DI 59 [ stderr.0 ])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fca3b32d980 stderr>) [0 stderr+0 S8 A64])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 4 (set (reg:DI 2 cx)
        (reg/f:DI 59 [ stderr.0 ])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 4 (set (reg:DI 1 dx)
        (const_int 28 [0x1c])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 14 13 15 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fca3b040558 *.LC0>)) bitcnts.c:51 87 {*movdi_internal_rex64}
     (nil))
(call_insn 16 15 17 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fca3b265a00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) bitcnts.c:51 663 {*call_value}
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 17 16 18 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) bitcnts.c:52 89 {*movsi_internal}
     (nil))
(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fca3b279f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) bitcnts.c:52 656 {*call}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      

(barrier 19 18 20)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 20 19 21 5 2 "" [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg/f:DI 69)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg/f:DI 60 [ D.3671 ])
                (plus:DI (reg/f:DI 69)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:54 274 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 24 23 25 5 (set (reg/f:DI 61 [ D.3672 ])
        (mem/f:DI (reg/f:DI 60 [ D.3671 ]) [0 *_8+0 S8 A64])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 5 (set (reg:DI 5 di)
        (reg/f:DI 61 [ D.3672 ])) bitcnts.c:54 87 {*movdi_internal_rex64}
     (nil))
(call_insn/i 26 25 27 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fca3b35fe00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) bitcnts.c:54 663 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 5 (set (reg:SI 70)
        (reg:SI 0 ax)) bitcnts.c:54 89 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])
        (reg:SI 70)) bitcnts.c:54 89 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:56 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) bitcnts.c:56 612 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fca3b0405f0 *.LC1>)) bitcnts.c:57 87 {*movdi_internal_rex64}
     (nil))
(call_insn 33 32 34 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fca3b267700 puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) bitcnts.c:57 663 {*call_value}
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 34 33 35 7 3 "" [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:59 89 {*movsi_internal}
     (nil))
(jump_insn 37 36 38 7 (set (pc)
        (label_ref 81)) bitcnts.c:59 650 {jump}
     (nil)
 -> 81)
;;  succ:       14

(barrier 38 37 83)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
(code_label 83 38 39 8 8 "" [1 uses])
(note 39 83 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
        (const_int 0 [0])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 8 (set (reg:DI 71)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 8 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
        (reg:DI 71)) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 8 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
        (const_int 1 [0x1])) bitcnts.c:65 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 44 43 45 8 (set (pc)
        (label_ref 58)) bitcnts.c:65 650 {jump}
     (nil)
 -> 58)
;;  succ:       10

(barrier 45 44 62)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 62 45 46 9 6 "" [1 uses])
(note 46 62 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 9 (set (reg:SI 73)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:66 89 {*movsi_internal}
     (nil))
(insn 48 47 49 9 (set (reg:DI 72)
        (sign_extend:DI (reg:SI 73))) bitcnts.c:66 149 {*extendsidi2_rex64}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 63 [ D.3674 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 72)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("pBitCntFunc.3630") [flags 0x2]  <var_decl 0x7fca3b02e5f0 pBitCntFunc>)) [0 pBitCntFunc S8 A64])) bitcnts.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 9 (set (reg:DI 74)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])) bitcnts.c:66 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 9 (set (reg:DI 5 di)
        (reg:DI 74)) bitcnts.c:66 87 {*movdi_internal_rex64}
     (nil))
(call_insn 52 51 53 9 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:DI 63 [ D.3674 ]) [0 *_17 S1 A8])
            (const_int 0 [0]))) bitcnts.c:66 663 {*call_value}
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 9 (set (reg:SI 64 [ D.3675 ])
        (reg:SI 0 ax)) bitcnts.c:66 89 {*movsi_internal}
     (nil))
(insn 54 53 55 9 (set (reg:DI 65 [ D.3673 ])
        (sign_extend:DI (reg:SI 64 [ D.3675 ]))) bitcnts.c:66 149 {*extendsidi2_rex64}
     (nil))
(insn 55 54 56 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                    (reg:DI 65 [ D.3673 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:66 274 {*adddi_1}
     (nil))
(insn 56 55 57 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 274 {*adddi_1}
     (nil))
(insn 57 56 58 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 274 {*adddi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9 (FALLTHRU,DFS_BACK)
(code_label 58 57 59 10 5 "" [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:SI 75)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])) bitcnts.c:65 89 {*movsi_internal}
     (nil))
(insn 61 60 63 10 (set (reg:DI 62 [ D.3673 ])
        (sign_extend:DI (reg:SI 75))) bitcnts.c:65 149 {*extendsidi2_rex64}
     (nil))
(insn 63 61 64 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 62 [ D.3673 ])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64]))) bitcnts.c:65 8 {*cmpdi_1}
     (nil))
(jump_insn 64 63 65 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) bitcnts.c:65 612 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       9
;;              11 (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 (FALLTHRU)
(note 65 64 66 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 67 66 68 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) bitcnts.c:82 612 {*jcc_1}
     (nil)
 -> 78)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 68 67 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 12 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:83 89 {*movsi_internal}
     (nil))
(insn 70 69 71 12 (set (reg:DI 76)
        (sign_extend:DI (reg:SI 77))) bitcnts.c:83 149 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 12 (set (reg/f:DI 66 [ D.3672 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 76)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("text.3631") [flags 0x2]  <var_decl 0x7fca3b02e688 text>)) [0 text S8 A64])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 72 71 73 12 (set (reg:DI 78)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 73 72 74 12 (set (reg:DI 1 dx)
        (reg:DI 78)) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 12 (set (reg:DI 4 si)
        (reg/f:DI 66 [ D.3672 ])) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fca3b040688 *.LC2>)) bitcnts.c:83 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) bitcnts.c:83 91 {*movqi_internal}
     (nil))
(call_insn 77 76 78 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fca3b265f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) bitcnts.c:83 663 {*call_value}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12 (FALLTHRU)
(code_label 78 77 79 13 7 "" [1 uses])
(note 79 78 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:59 273 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              13 (FALLTHRU,DFS_BACK)
(code_label 81 80 82 14 4 "" [1 uses])
(note 82 81 84 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) bitcnts.c:59 7 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) bitcnts.c:59 612 {*jcc_1}
     (nil)
 -> 83)
;;  succ:       8
;;              15 (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
(note 86 85 87 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 90 15 (set (reg:SI 67 [ D.3675 ])
        (const_int 0 [0])) bitcnts.c:89 89 {*movsi_internal}
     (nil))
(insn 90 87 94 15 (set (reg:SI 68 [ <retval> ])
        (reg:SI 67 [ D.3675 ])) bitcnts.c:89 89 {*movsi_internal}
     (nil))
(insn 94 90 97 15 (set (reg/i:SI 0 ax)
        (reg:SI 68 [ <retval> ])) bitcnts.c:90 89 {*movsi_internal}
     (nil))
(insn 97 94 0 15 (use (reg/i:SI 0 ax)) bitcnts.c:90 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function bit_shifter (bit_shifter, funcdef_no=3, decl_uid=3618, cgraph_uid=3)

(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) bitcnts.c:93 87 {*movdi_internal_rex64}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 64)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (reg:SI 64)) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (label_ref 18)) bitcnts.c:96 650 {jump}
     (nil)
 -> 18)
;;  succ:       5

(barrier 10 9 24)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 24 10 11 4 13 "" [1 uses])
(note 11 24 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:DI 65)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) bitcnts.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 4 (set (reg:SI 60 [ D.3679 ])
        (subreg:SI (reg:DI 65) 0)) bitcnts.c:97 89 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (parallel [
            (set (reg:SI 61 [ D.3679 ])
                (and:SI (reg:SI 60 [ D.3679 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 393 {*andsi_1}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                    (reg:SI 61 [ D.3679 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 273 {*addsi_1}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 273 {*addsi_1}
     (nil))
(insn 17 16 18 4 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                (ashiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 548 {*ashrdi3_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 18 17 19 5 11 "" [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) bitcnts.c:96 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) bitcnts.c:96 612 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 25 6 (set (reg:SI 59 [ i.1 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:96 89 {*movsi_internal}
     (nil))
(insn 25 23 26 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 59 [ i.1 ])
            (const_int 63 [0x3f]))) bitcnts.c:96 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) bitcnts.c:96 612 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       4
;;              7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 27 26 28 7 12 "" [1 uses])
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 32 7 (set (reg:SI 62 [ D.3679 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:98 89 {*movsi_internal}
     (nil))
(insn 32 29 36 7 (set (reg:SI 63 [ <retval> ])
        (reg:SI 62 [ D.3679 ])) bitcnts.c:98 89 {*movsi_internal}
     (nil))
(insn 36 32 39 7 (set (reg/i:SI 0 ax)
        (reg:SI 63 [ <retval> ])) bitcnts.c:99 89 {*movsi_internal}
     (nil))
(insn 39 36 0 7 (use (reg/i:SI 0 ax)) bitcnts.c:99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

