
;; Function main1 (main1, funcdef_no=2, decl_uid=3622, cgraph_uid=2)

main1 (int argc, char * * argv, int print)
{
  static char * text[7] = {"Optimized 1 bit/loop counter", "Ratko\'s mystery algorithm", "Recursive bit count by nybbles", "Non-recursive bit count by nybbles", "Non-recursive bit count by bytes (BW)", "Non-recursive bit count by bytes (AR)", "Shift and count bits"};
  static int (*<T92d>) (long int) pBitCntFunc[7] = {bit_count, bitcount, ntbl_bitcnt, ntbl_bitcount, BW_btbl_bitcount, AR_btbl_bitcount, bit_shifter};
  int iterations;
  long int seed;
  long int n;
  long int j;
  int i;
  int D.3661;
  char * D.3660;
  long int D.3657;
  long int D.3656;
  int D.3655;
  int (*<T92d>) (long int) D.3654;
  char * D.3651;
  char * * D.3650;
  struct _IO_FILE * stderr.0;
  char * * _8;
  char * _9;
  long int _16;
  int (*<T92d>) (long int) _17;
  int _18;
  long int _19;
  char * _23;
  int _25;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (argc_5(D) <= 1)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  stderr.0_6 = stderr;
  __builtin_fwrite ("Usage: bitcnts <iterations>\n", 1, 28, stderr.0_6);
  exit (1);
;;    succ:      

;;   basic block 4, loop depth 0
;;    pred:       2
  _8 = argv_7(D) + 8;
  _9 = *_8;
  iterations_10 = atoi (_9);
  if (print_11(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  puts ("Bit counter algorithm benchmark\n");
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  i_12 = 0;
  goto <bb 13>;
;;    succ:       13

;;   basic block 7, loop depth 0
;;    pred:       13
  n_13 = 0;
  j_14 = n_13;
  seed_15 = 1;
  goto <bb 9>;
;;    succ:       9

;;   basic block 8, loop depth 0
;;    pred:       9
  _17 = pBitCntFunc[i_1];
  _18 = _17 (seed_4);
  _19 = (long int) _18;
  n_20 = _19 + n_3;
  j_21 = j_2 + 1;
  seed_22 = seed_4 + 13;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
  # j_2 = PHI <j_14(7), j_21(8)>
  # n_3 = PHI <n_13(7), n_20(8)>
  # seed_4 = PHI <seed_15(7), seed_22(8)>
  _16 = (long int) iterations_10;
  if (_16 > j_2)
    goto <bb 8>;
  else
    goto <bb 10>;
;;    succ:       8
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  if (print_11(D) != 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  _23 = text[i_1];
  printf ("%-38s> Bits: %ld\n", _23, n_3);
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       10
;;                11
  i_24 = i_1 + 1;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       6
;;                12
  # i_1 = PHI <i_12(6), i_24(12)>
  if (i_1 <= 6)
    goto <bb 7>;
  else
    goto <bb 14>;
;;    succ:       7
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  _25 = 0;
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       14
<L12>:
  return _25;
;;    succ:       EXIT

}



Partition map 

Partition 1 (i_1 - 1 )
Partition 2 (j_2 - 2 )
Partition 3 (n_3 - 3 )
Partition 4 (seed_4 - 4 )
Partition 5 (argc_5(D) - 5 )
Partition 6 (stderr.0_6 - 6 )
Partition 7 (argv_7(D) - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (iterations_10 - 10 )
Partition 11 (print_11(D) - 11 )
Partition 12 (i_12 - 12 )
Partition 13 (n_13 - 13 )
Partition 14 (j_14 - 14 )
Partition 15 (seed_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (n_20 - 20 )
Partition 21 (j_21 - 21 )
Partition 22 (seed_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (i_24 - 24 )
Partition 25 (_25 - 25 )


Partition map 

Partition 0 (i_1 - 1 )
Partition 1 (j_2 - 2 )
Partition 2 (n_3 - 3 )
Partition 3 (seed_4 - 4 )
Partition 4 (argc_5(D) - 5 )
Partition 5 (argv_7(D) - 7 )
Partition 6 (print_11(D) - 11 )
Partition 7 (i_12 - 12 )
Partition 8 (n_13 - 13 )
Partition 9 (j_14 - 14 )
Partition 10 (seed_15 - 15 )
Partition 11 (n_20 - 20 )
Partition 12 (j_21 - 21 )
Partition 13 (seed_22 - 22 )
Partition 14 (i_24 - 24 )


Live on entry to BB2 : argc_5(D)  argv_7(D)  print_11(D)  

Live on entry to BB3 : 

Live on entry to BB4 : argv_7(D)  print_11(D)  

Live on entry to BB5 : print_11(D)  

Live on entry to BB6 : print_11(D)  

Live on entry to BB7 : i_1  print_11(D)  

Live on entry to BB8 : i_1  j_2  n_3  seed_4  print_11(D)  

Live on entry to BB9 : i_1  print_11(D)  

Live on entry to BB10 : i_1  n_3  print_11(D)  

Live on entry to BB11 : i_1  n_3  print_11(D)  

Live on entry to BB12 : i_1  print_11(D)  

Live on entry to BB13 : print_11(D)  

Live on entry to BB14 : 

Live on entry to BB15 : 

Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646) i_1 <-> i_12
(2147483646) i_1 <-> i_24
(2147483646) j_2 <-> j_14
(2147483646) j_2 <-> j_21
(2147483646) n_3 <-> n_13
(2147483646) n_3 <-> n_20
(2147483646) seed_4 <-> seed_15
(2147483646) seed_4 <-> seed_22

Partition map 

Partition 0 (i_1 - 1 )
Partition 1 (j_2 - 2 )
Partition 2 (n_3 - 3 )
Partition 3 (seed_4 - 4 )
Partition 4 (argc_5(D) - 5 )
Partition 5 (argv_7(D) - 7 )
Partition 6 (print_11(D) - 11 )
Partition 7 (i_12 - 12 )
Partition 8 (n_13 - 13 )
Partition 9 (j_14 - 14 )
Partition 10 (seed_15 - 15 )
Partition 11 (n_20 - 20 )
Partition 12 (j_21 - 21 )
Partition 13 (seed_22 - 22 )
Partition 14 (i_24 - 24 )

Coalesce list: (1)i_1 & (12)i_12 [map: 0, 7] : Success -> 0
Coalesce list: (1)i_1 & (24)i_24 [map: 0, 14] : Success -> 0
Coalesce list: (2)j_2 & (14)j_14 [map: 1, 9] : Success -> 1
Coalesce list: (2)j_2 & (21)j_21 [map: 1, 12] : Success -> 1
Coalesce list: (3)n_3 & (13)n_13 [map: 2, 8] : Success -> 2
Coalesce list: (3)n_3 & (20)n_20 [map: 2, 11] : Success -> 2
Coalesce list: (4)seed_4 & (15)seed_15 [map: 3, 10] : Success -> 3
Coalesce list: (4)seed_4 & (22)seed_22 [map: 3, 13] : Success -> 3
Coalesce list: (1)i_1 & (24)i_1: Already Coalesced.
Coalesce list: (1)i_1 & (12)i_1: Already Coalesced.
Coalesce list: (4)seed_4 & (22)seed_4: Already Coalesced.
Coalesce list: (4)seed_4 & (15)seed_4: Already Coalesced.
Coalesce list: (3)n_3 & (20)n_3: Already Coalesced.
Coalesce list: (2)j_2 & (21)j_2: Already Coalesced.
Coalesce list: (2)j_2 & (14)j_2: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (i_1 - 1 12 24 )
Partition 1 (j_2 - 2 14 21 )
Partition 2 (n_3 - 3 13 20 )
Partition 3 (seed_4 - 4 15 22 )
Partition 4 (argc_5(D) - 5 )
Partition 5 (stderr.0_6 - 6 )
Partition 6 (argv_7(D) - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (iterations_10 - 10 )
Partition 10 (print_11(D) - 11 )
Partition 11 (_16 - 16 )
Partition 12 (_17 - 17 )
Partition 13 (_18 - 18 )
Partition 14 (_19 - 19 )
Partition 15 (_23 - 23 )
Partition 16 (_25 - 25 )

main1 (int argc, char * * argv, int print)
{
  static char * text[7] = {"Optimized 1 bit/loop counter", "Ratko\'s mystery algorithm", "Recursive bit count by nybbles", "Non-recursive bit count by nybbles", "Non-recursive bit count by bytes (BW)", "Non-recursive bit count by bytes (AR)", "Shift and count bits"};
  static int (*<T92d>) (long int) pBitCntFunc[7] = {bit_count, bitcount, ntbl_bitcnt, ntbl_bitcount, BW_btbl_bitcount, AR_btbl_bitcount, bit_shifter};
  int iterations;
  long int seed;
  long int n;
  long int j;
  int i;
  int D.3661;
  char * D.3660;
  long int D.3657;
  long int D.3656;
  int D.3655;
  int (*<T92d>) (long int) D.3654;
  char * D.3651;
  char * * D.3650;
  struct _IO_FILE * stderr.0;
  char * * _8;
  char * _9;
  long int _16;
  int (*<T92d>) (long int) _17;
  int _18;
  long int _19;
  char * _23;
  int _25;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (argc_5(D) <= 1)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  stderr.0_6 = stderr;
  __builtin_fwrite ("Usage: bitcnts <iterations>\n", 1, 28, stderr.0_6);
  exit (1);
;;    succ:      

;;   basic block 4, loop depth 0
;;    pred:       2
  _8 = argv_7(D) + 8;
  _9 = *_8;
  iterations_10 = atoi (_9);
  if (print_11(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  puts ("Bit counter algorithm benchmark\n");
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  i_12 = 0;
  goto <bb 13>;
;;    succ:       13

;;   basic block 7, loop depth 0
;;    pred:       13
  n_13 = 0;
  j_14 = n_13;
  seed_15 = 1;
  goto <bb 9>;
;;    succ:       9

;;   basic block 8, loop depth 0
;;    pred:       9
  _17 = pBitCntFunc[i_1];
  _18 = _17 (seed_4);
  _19 = (long int) _18;
  n_20 = _19 + n_3;
  j_21 = j_2 + 1;
  seed_22 = seed_4 + 13;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       7
;;                8
  # j_2 = PHI <j_14(7), j_21(8)>
  # n_3 = PHI <n_13(7), n_20(8)>
  # seed_4 = PHI <seed_15(7), seed_22(8)>
  _16 = (long int) iterations_10;
  if (_16 > j_2)
    goto <bb 8>;
  else
    goto <bb 10>;
;;    succ:       8
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  if (print_11(D) != 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  _23 = text[i_1];
  printf ("%-38s> Bits: %ld\n", _23, n_3);
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       10
;;                11
  i_24 = i_1 + 1;
;;    succ:       13

;;   basic block 13, loop depth 0
;;    pred:       6
;;                12
  # i_1 = PHI <i_12(6), i_24(12)>
  if (i_1 <= 6)
    goto <bb 7>;
  else
    goto <bb 14>;
;;    succ:       7
;;                14

;;   basic block 14, loop depth 0
;;    pred:       13
  _25 = 0;
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       14
<L12>:
  return _25;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (argc_5(D) <= 1)

(insn 8 7 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) bitcnts.c:50 -1
     (nil))

(jump_insn 9 8 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) bitcnts.c:50 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; stderr.0_6 = stderr;

(insn 11 10 0 (set (reg/f:DI 59 [ stderr.0 ])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fca3b32d980 stderr>) [0 stderr+0 S8 A64])) bitcnts.c:51 -1
     (nil))

;; __builtin_fwrite ("Usage: bitcnts <iterations>\n", 1, 28, stderr.0_6);

(insn 12 11 13 (set (reg:DI 2 cx)
        (reg/f:DI 59 [ stderr.0 ])) bitcnts.c:51 -1
     (nil))

(insn 13 12 14 (set (reg:DI 1 dx)
        (const_int 28 [0x1c])) bitcnts.c:51 -1
     (nil))

(insn 14 13 15 (set (reg:DI 4 si)
        (const_int 1 [0x1])) bitcnts.c:51 -1
     (nil))

(insn 15 14 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fca3b040558 *.LC0>)) bitcnts.c:51 -1
     (nil))

(call_insn 16 15 0 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fca3b265a00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) bitcnts.c:51 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))

;; exit (1);

(insn 17 16 18 (set (reg:SI 5 di)
        (const_int 1 [0x1])) bitcnts.c:52 -1
     (nil))

(call_insn 18 17 19 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fca3b279f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) bitcnts.c:52 -1
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))

(barrier 19 18 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 20 19 21 2 "" [0 uses])

(note 21 20 0 NOTE_INSN_BASIC_BLOCK)

;; _8 = argv_7(D) + 8;

(insn 22 21 23 (set (reg/f:DI 69)
        (mem/f/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])) bitcnts.c:54 -1
     (nil))

(insn 23 22 0 (parallel [
            (set (reg/f:DI 60 [ D.3671 ])
                (plus:DI (reg/f:DI 69)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:54 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

;; _9 = *_8;

(insn 24 23 0 (set (reg/f:DI 61 [ D.3672 ])
        (mem/f:DI (reg/f:DI 60 [ D.3671 ]) [0 *_8+0 S8 A64])) bitcnts.c:54 -1
     (nil))

;; iterations_10 = atoi (_9);

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 61 [ D.3672 ])) bitcnts.c:54 -1
     (nil))

(call_insn/i 26 25 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fca3b35fe00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) bitcnts.c:54 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))

(insn 27 26 28 (set (reg:SI 70)
        (reg:SI 0 ax)) bitcnts.c:54 -1
     (nil))

(insn 28 27 0 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])
        (reg:SI 70)) bitcnts.c:54 -1
     (nil))

;; if (print_11(D) != 0)

(insn 29 28 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:56 -1
     (nil))

(jump_insn 30 29 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) bitcnts.c:56 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; puts ("Bit counter algorithm benchmark\n");

(insn 32 31 33 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fca3b0405f0 *.LC1>)) bitcnts.c:57 -1
     (nil))

(call_insn 33 32 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fca3b267700 puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) bitcnts.c:57 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 6

;; 

(code_label 34 33 35 3 "" [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)

;; i_12 = 0;

(insn 36 35 0 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:59 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; n_13 = 0;

(insn 40 39 0 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
        (const_int 0 [0])) bitcnts.c:65 -1
     (nil))

;; j_14 = n_13;

(insn 41 40 42 (set (reg:DI 71)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:65 -1
     (nil))

(insn 42 41 0 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
        (reg:DI 71)) bitcnts.c:65 -1
     (nil))

;; seed_15 = 1;

(insn 43 42 0 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
        (const_int 1 [0x1])) bitcnts.c:65 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; _17 = pBitCntFunc[i_1];

(insn 47 46 48 (set (reg:SI 73)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:66 -1
     (nil))

(insn 48 47 49 (set (reg:DI 72)
        (sign_extend:DI (reg:SI 73))) bitcnts.c:66 -1
     (nil))

(insn 49 48 0 (set (reg/f:DI 63 [ D.3674 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 72)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("pBitCntFunc.3630") [flags 0x2]  <var_decl 0x7fca3b02e5f0 pBitCntFunc>)) [0 pBitCntFunc S8 A64])) bitcnts.c:66 -1
     (nil))

;; _18 = _17 (seed_4);

(insn 50 49 51 (set (reg:DI 74)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])) bitcnts.c:66 -1
     (nil))

(insn 51 50 52 (set (reg:DI 5 di)
        (reg:DI 74)) bitcnts.c:66 -1
     (nil))

(call_insn 52 51 53 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:DI 63 [ D.3674 ]) [0 *_17 S1 A8])
            (const_int 0 [0]))) bitcnts.c:66 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))

(insn 53 52 0 (set (reg:SI 64 [ D.3675 ])
        (reg:SI 0 ax)) bitcnts.c:66 -1
     (nil))

;; _19 = (long int) _18;

(insn 54 53 0 (set (reg:DI 65 [ D.3673 ])
        (sign_extend:DI (reg:SI 64 [ D.3675 ]))) bitcnts.c:66 -1
     (nil))

;; n_20 = _19 + n_3;

(insn 55 54 0 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                    (reg:DI 65 [ D.3673 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:66 -1
     (nil))

;; j_21 = j_2 + 1;

(insn 56 55 0 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 -1
     (nil))

;; seed_22 = seed_4 + 13;

(insn 57 56 0 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 58 57 59 5 "" [0 uses])

(note 59 58 0 NOTE_INSN_BASIC_BLOCK)

;; _16 = (long int) iterations_10;

(insn 60 59 61 (set (reg:SI 75)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])) bitcnts.c:65 -1
     (nil))

(insn 61 60 0 (set (reg:DI 62 [ D.3673 ])
        (sign_extend:DI (reg:SI 75))) bitcnts.c:65 -1
     (nil))

;; if (_16 > j_2)

(insn 63 61 64 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 62 [ D.3673 ])
            (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64]))) bitcnts.c:65 -1
     (nil))

(jump_insn 64 63 0 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) bitcnts.c:65 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; if (print_11(D) != 0)

(insn 66 65 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:82 -1
     (nil))

(jump_insn 67 66 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) bitcnts.c:82 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; _23 = text[i_1];

(insn 69 68 70 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:83 -1
     (nil))

(insn 70 69 71 (set (reg:DI 76)
        (sign_extend:DI (reg:SI 77))) bitcnts.c:83 -1
     (nil))

(insn 71 70 0 (set (reg/f:DI 66 [ D.3672 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 76)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("text.3631") [flags 0x2]  <var_decl 0x7fca3b02e688 text>)) [0 text S8 A64])) bitcnts.c:83 -1
     (nil))

;; printf ("%-38s> Bits: %ld\n", _23, n_3);

(insn 72 71 73 (set (reg:DI 78)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:83 -1
     (nil))

(insn 73 72 74 (set (reg:DI 1 dx)
        (reg:DI 78)) bitcnts.c:83 -1
     (nil))

(insn 74 73 75 (set (reg:DI 4 si)
        (reg/f:DI 66 [ D.3672 ])) bitcnts.c:83 -1
     (nil))

(insn 75 74 76 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fca3b040688 *.LC2>)) bitcnts.c:83 -1
     (nil))

(insn 76 75 77 (set (reg:QI 0 ax)
        (const_int 0 [0])) bitcnts.c:83 -1
     (nil))

(call_insn 77 76 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fca3b265f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) bitcnts.c:83 -1
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))

;; Generating RTL for gimple basic block 12

;; 

(code_label 78 77 79 7 "" [0 uses])

(note 79 78 0 NOTE_INSN_BASIC_BLOCK)

;; i_24 = i_1 + 1;

(insn 80 79 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:59 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; 

(code_label 81 80 82 4 "" [0 uses])

(note 82 81 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_1 <= 6)

(insn 84 82 85 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) bitcnts.c:59 -1
     (nil))

(jump_insn 85 84 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) bitcnts.c:59 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; _25 = 0;

(insn 87 86 0 (set (reg:SI 67 [ D.3675 ])
        (const_int 0 [0])) bitcnts.c:89 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; <L12>:

(code_label 88 87 89 9 "" [0 uses])

(note 89 88 0 NOTE_INSN_BASIC_BLOCK)

;; return _25;

(insn 90 89 91 (set (reg:SI 68 [ <retval> ])
        (reg:SI 67 [ D.3675 ])) bitcnts.c:89 -1
     (nil))

(jump_insn 91 90 92 (set (pc)
        (label_ref 0)) bitcnts.c:89 -1
     (nil))

(barrier 92 91 0)
deleting block 17


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 16 into block 15...
Merged blocks 15 and 16.
Merged 15 and 16 without moving.
Merging block 17 into block 15...
Merged blocks 15 and 17.
Merged 15 and 17 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) bitcnts.c:22 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) bitcnts.c:22 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
        (reg:SI 1 dx [ print ])) bitcnts.c:22 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -52 [0xffffffffffffffcc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) bitcnts.c:50 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) bitcnts.c:50 -1
     (nil)
 -> 20)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg/f:DI 59 [ stderr.0 ])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7fca3b32d980 stderr>) [0 stderr+0 S8 A64])) bitcnts.c:51 -1
     (nil))
(insn 12 11 13 4 (set (reg:DI 2 cx)
        (reg/f:DI 59 [ stderr.0 ])) bitcnts.c:51 -1
     (nil))
(insn 13 12 14 4 (set (reg:DI 1 dx)
        (const_int 28 [0x1c])) bitcnts.c:51 -1
     (nil))
(insn 14 13 15 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) bitcnts.c:51 -1
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fca3b040558 *.LC0>)) bitcnts.c:51 -1
     (nil))
(call_insn 16 15 17 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fca3b265a00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) bitcnts.c:51 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (nil))))))
(insn 17 16 18 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) bitcnts.c:52 -1
     (nil))
(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fca3b279f00 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) bitcnts.c:52 -1
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_BR_PRED (use (reg:SI 5 di))
        (nil)))
;;  succ:      

(barrier 19 18 20)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 20 19 21 5 2 "" [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg/f:DI 69)
        (mem/f/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])) bitcnts.c:54 -1
     (nil))
(insn 23 22 24 5 (parallel [
            (set (reg/f:DI 60 [ D.3671 ])
                (plus:DI (reg/f:DI 69)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:54 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 24 23 25 5 (set (reg/f:DI 61 [ D.3672 ])
        (mem/f:DI (reg/f:DI 60 [ D.3671 ]) [0 *_8+0 S8 A64])) bitcnts.c:54 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 5 di)
        (reg/f:DI 61 [ D.3672 ])) bitcnts.c:54 -1
     (nil))
(call_insn/i 26 25 27 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fca3b35fe00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) bitcnts.c:54 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 5 (set (reg:SI 70)
        (reg:SI 0 ax)) bitcnts.c:54 -1
     (nil))
(insn 28 27 29 5 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])
        (reg:SI 70)) bitcnts.c:54 -1
     (nil))
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:56 -1
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) bitcnts.c:56 -1
     (nil)
 -> 34)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fca3b0405f0 *.LC1>)) bitcnts.c:57 -1
     (nil))
(call_insn 33 32 34 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fca3b267700 puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) bitcnts.c:57 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 34 33 35 7 3 "" [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:59 -1
     (nil))
(jump_insn 37 36 38 7 (set (pc)
        (label_ref 81)) bitcnts.c:59 -1
     (nil)
 -> 81)
;;  succ:       14

(barrier 38 37 83)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
(code_label 83 38 39 8 8 "" [1 uses])
(note 39 83 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 8 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
        (const_int 0 [0])) bitcnts.c:65 -1
     (nil))
(insn 41 40 42 8 (set (reg:DI 71)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:65 -1
     (nil))
(insn 42 41 43 8 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
        (reg:DI 71)) bitcnts.c:65 -1
     (nil))
(insn 43 42 44 8 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
        (const_int 1 [0x1])) bitcnts.c:65 -1
     (nil))
(jump_insn 44 43 45 8 (set (pc)
        (label_ref 58)) bitcnts.c:65 -1
     (nil)
 -> 58)
;;  succ:       10

(barrier 45 44 62)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 62 45 46 9 6 "" [1 uses])
(note 46 62 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 9 (set (reg:SI 73)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:66 -1
     (nil))
(insn 48 47 49 9 (set (reg:DI 72)
        (sign_extend:DI (reg:SI 73))) bitcnts.c:66 -1
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 63 [ D.3674 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 72)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("pBitCntFunc.3630") [flags 0x2]  <var_decl 0x7fca3b02e5f0 pBitCntFunc>)) [0 pBitCntFunc S8 A64])) bitcnts.c:66 -1
     (nil))
(insn 50 49 51 9 (set (reg:DI 74)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])) bitcnts.c:66 -1
     (nil))
(insn 51 50 52 9 (set (reg:DI 5 di)
        (reg:DI 74)) bitcnts.c:66 -1
     (nil))
(call_insn 52 51 53 9 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:DI 63 [ D.3674 ]) [0 *_17 S1 A8])
            (const_int 0 [0]))) bitcnts.c:66 -1
     (nil)
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 9 (set (reg:SI 64 [ D.3675 ])
        (reg:SI 0 ax)) bitcnts.c:66 -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 65 [ D.3673 ])
        (sign_extend:DI (reg:SI 64 [ D.3675 ]))) bitcnts.c:66 -1
     (nil))
(insn 55 54 56 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])
                    (reg:DI 65 [ D.3673 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:66 -1
     (nil))
(insn 56 55 57 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 -1
     (nil))
(insn 57 56 58 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -32 [0xffffffffffffffe0])) [0 seed+0 S8 A64])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:65 -1
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9 (FALLTHRU,DFS_BACK)
(code_label 58 57 59 10 5 "" [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:SI 75)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [0 iterations+0 S4 A32])) bitcnts.c:65 -1
     (nil))
(insn 61 60 63 10 (set (reg:DI 62 [ D.3673 ])
        (sign_extend:DI (reg:SI 75))) bitcnts.c:65 -1
     (nil))
(insn 63 61 64 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 62 [ D.3673 ])
            (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S8 A64]))) bitcnts.c:65 -1
     (nil))
(jump_insn 64 63 65 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) bitcnts.c:65 -1
     (nil)
 -> 62)
;;  succ:       9
;;              11 (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 (FALLTHRU)
(note 65 64 66 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 print+0 S4 A32])
            (const_int 0 [0]))) bitcnts.c:82 -1
     (nil))
(jump_insn 67 66 68 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) bitcnts.c:82 -1
     (nil)
 -> 78)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 68 67 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 12 (set (reg:SI 77)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:83 -1
     (nil))
(insn 70 69 71 12 (set (reg:DI 76)
        (sign_extend:DI (reg:SI 77))) bitcnts.c:83 -1
     (nil))
(insn 71 70 72 12 (set (reg/f:DI 66 [ D.3672 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 76)
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("text.3631") [flags 0x2]  <var_decl 0x7fca3b02e688 text>)) [0 text S8 A64])) bitcnts.c:83 -1
     (nil))
(insn 72 71 73 12 (set (reg:DI 78)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S8 A64])) bitcnts.c:83 -1
     (nil))
(insn 73 72 74 12 (set (reg:DI 1 dx)
        (reg:DI 78)) bitcnts.c:83 -1
     (nil))
(insn 74 73 75 12 (set (reg:DI 4 si)
        (reg/f:DI 66 [ D.3672 ])) bitcnts.c:83 -1
     (nil))
(insn 75 74 76 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fca3b040688 *.LC2>)) bitcnts.c:83 -1
     (nil))
(insn 76 75 77 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) bitcnts.c:83 -1
     (nil))
(call_insn 77 76 78 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fca3b265f00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) bitcnts.c:83 -1
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12 (FALLTHRU)
(code_label 78 77 79 13 7 "" [1 uses])
(note 79 78 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:59 -1
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              13 (FALLTHRU,DFS_BACK)
(code_label 81 80 82 14 4 "" [1 uses])
(note 82 81 84 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) bitcnts.c:59 -1
     (nil))
(jump_insn 85 84 86 14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) bitcnts.c:59 -1
     (nil)
 -> 83)
;;  succ:       8
;;              15 (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
(note 86 85 87 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 90 15 (set (reg:SI 67 [ D.3675 ])
        (const_int 0 [0])) bitcnts.c:89 -1
     (nil))
(insn 90 87 94 15 (set (reg:SI 68 [ <retval> ])
        (reg:SI 67 [ D.3675 ])) bitcnts.c:89 -1
     (nil))
(insn 94 90 97 15 (set (reg/i:SI 0 ax)
        (reg:SI 68 [ <retval> ])) bitcnts.c:90 -1
     (nil))
(insn 97 94 0 15 (use (reg/i:SI 0 ax)) bitcnts.c:90 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function bit_shifter (bit_shifter, funcdef_no=3, decl_uid=3618, cgraph_uid=3)

bit_shifter (long int x)
{
  int n;
  int i;
  int D.3667;
  unsigned int i.1;
  int D.3664;
  int D.3663;
  int _8;
  int _9;
  int _13;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  n_4 = 0;
  i_5 = n_4;
  goto <bb 4>;
;;    succ:       4

;;   basic block 3, loop depth 0
;;    pred:       5
  _8 = (int) x_1;
  _9 = _8 & 1;
  n_10 = _9 + n_3;
  i_11 = i_2 + 1;
  x_12 = x_1 >> 1;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # x_1 = PHI <x_6(D)(2), x_12(3)>
  # i_2 = PHI <i_5(2), i_11(3)>
  # n_3 = PHI <n_4(2), n_10(3)>
  if (x_1 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  i.1_7 = (unsigned int) i_2;
  if (i.1_7 <= 63)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3
;;                6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  _13 = n_3;
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       6
<L4>:
  return _13;
;;    succ:       EXIT

}



Partition map 

Partition 1 (x_1 - 1 )
Partition 2 (i_2 - 2 )
Partition 3 (n_3 - 3 )
Partition 4 (n_4 - 4 )
Partition 5 (i_5 - 5 )
Partition 6 (x_6(D) - 6 )
Partition 7 (i.1_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (n_10 - 10 )
Partition 11 (i_11 - 11 )
Partition 12 (x_12 - 12 )
Partition 13 (_13 - 13 )


Partition map 

Partition 0 (x_1 - 1 )
Partition 1 (i_2 - 2 )
Partition 2 (n_3 - 3 )
Partition 3 (n_4 - 4 )
Partition 4 (i_5 - 5 )
Partition 5 (x_6(D) - 6 )
Partition 6 (n_10 - 10 )
Partition 7 (i_11 - 11 )
Partition 8 (x_12 - 12 )


Live on entry to BB2 : x_6(D)  

Live on entry to BB3 : x_1  i_2  n_3  

Live on entry to BB4 : 

Live on entry to BB5 : x_1  i_2  n_3  

Live on entry to BB6 : n_3  

Live on entry to BB7 : 

Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646) x_1 <-> x_6(D)
(2147483646) x_1 <-> x_12
(2147483646) i_2 <-> i_5
(2147483646) i_2 <-> i_11
(2147483646) n_3 <-> n_4
(2147483646) n_3 <-> n_10

Partition map 

Partition 0 (x_1 - 1 )
Partition 1 (i_2 - 2 )
Partition 2 (n_3 - 3 )
Partition 3 (n_4 - 4 )
Partition 4 (i_5 - 5 )
Partition 5 (x_6(D) - 6 )
Partition 6 (n_10 - 10 )
Partition 7 (i_11 - 11 )
Partition 8 (x_12 - 12 )

Coalesce list: (1)x_1 & (6)x_6(D) [map: 0, 5] : Success -> 0
Coalesce list: (1)x_1 & (12)x_12 [map: 0, 8] : Success -> 0
Coalesce list: (2)i_2 & (5)i_5 [map: 1, 4] : Success -> 1
Coalesce list: (2)i_2 & (11)i_11 [map: 1, 7] : Success -> 1
Coalesce list: (3)n_3 & (4)n_4 [map: 2, 3] : Success -> 2
Coalesce list: (3)n_3 & (10)n_10 [map: 2, 6] : Success -> 2
Coalesce list: (3)n_3 & (10)n_3: Already Coalesced.
Coalesce list: (2)i_2 & (11)i_2: Already Coalesced.
Coalesce list: (2)i_2 & (5)i_2: Already Coalesced.
Coalesce list: (1)x_1 & (12)x_1: Already Coalesced.
Coalesce list: (1)x_1 & (6)x_1: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (x_1 - 1 6 12 )
Partition 1 (i_2 - 2 5 11 )
Partition 2 (n_3 - 3 4 10 )
Partition 3 (i.1_7 - 7 )
Partition 4 (_8 - 8 )
Partition 5 (_9 - 9 )
Partition 6 (_13 - 13 )

bit_shifter (long int x)
{
  int n;
  int i;
  int D.3667;
  unsigned int i.1;
  int D.3664;
  int D.3663;
  int _8;
  int _9;
  int _13;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  n_4 = 0;
  i_5 = n_4;
  goto <bb 4>;
;;    succ:       4

;;   basic block 3, loop depth 0
;;    pred:       5
  _8 = (int) x_1;
  _9 = _8 & 1;
  n_10 = _9 + n_3;
  i_11 = i_2 + 1;
  x_12 = x_1 >> 1;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # x_1 = PHI <x_6(D)(2), x_12(3)>
  # i_2 = PHI <i_5(2), i_11(3)>
  # n_3 = PHI <n_4(2), n_10(3)>
  if (x_1 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  i.1_7 = (unsigned int) i_2;
  if (i.1_7 <= 63)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3
;;                6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  _13 = n_3;
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       6
<L4>:
  return _13;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; n_4 = 0;

(insn 6 5 0 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:96 -1
     (nil))

;; i_5 = n_4;

(insn 7 6 8 (set (reg:SI 64)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:96 -1
     (nil))

(insn 8 7 0 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (reg:SI 64)) bitcnts.c:96 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _8 = (int) x_1;

(insn 12 11 13 (set (reg:DI 65)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) bitcnts.c:97 -1
     (nil))

(insn 13 12 0 (set (reg:SI 60 [ D.3679 ])
        (subreg:SI (reg:DI 65) 0)) bitcnts.c:97 -1
     (nil))

;; _9 = _8 & 1;

(insn 14 13 0 (parallel [
            (set (reg:SI 61 [ D.3679 ])
                (and:SI (reg:SI 60 [ D.3679 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 -1
     (nil))

;; n_10 = _9 + n_3;

(insn 15 14 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                    (reg:SI 61 [ D.3679 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 -1
     (nil))

;; i_11 = i_2 + 1;

(insn 16 15 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 -1
     (nil))

;; x_12 = x_1 >> 1;

(insn 17 16 0 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                (ashiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 17 19 11 "" [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; if (x_1 != 0)

(insn 20 19 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) bitcnts.c:96 -1
     (nil))

(jump_insn 21 20 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) bitcnts.c:96 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; i.1_7 = (unsigned int) i_2;

(insn 23 22 0 (set (reg:SI 59 [ i.1 ])
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:96 -1
     (nil))

;; if (i.1_7 <= 63)

(insn 25 23 26 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 59 [ i.1 ])
            (const_int 63 [0x3f]))) bitcnts.c:96 -1
     (nil))

(jump_insn 26 25 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) bitcnts.c:96 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 27 26 28 12 "" [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; _13 = n_3;

(insn 29 28 0 (set (reg:SI 62 [ D.3679 ])
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:98 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; <L4>:

(code_label 30 29 31 14 "" [0 uses])

(note 31 30 0 NOTE_INSN_BASIC_BLOCK)

;; return _13;

(insn 32 31 33 (set (reg:SI 63 [ <retval> ])
        (reg:SI 62 [ D.3679 ])) bitcnts.c:98 -1
     (nil))

(jump_insn 33 32 34 (set (pc)
        (label_ref 0)) bitcnts.c:98 -1
     (nil))

(barrier 34 33 0)
deleting block 9


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.
Merging block 9 into block 7...
Merged blocks 7 and 9.
Merged 7 and 9 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
        (reg:DI 5 di [ x ])) bitcnts.c:93 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
        (const_int 0 [0])) bitcnts.c:96 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 64)
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:96 -1
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (reg:SI 64)) bitcnts.c:96 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (label_ref 18)) bitcnts.c:96 -1
     (nil)
 -> 18)
;;  succ:       5

(barrier 10 9 24)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 24 10 11 4 13 "" [1 uses])
(note 11 24 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:DI 65)
        (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])) bitcnts.c:97 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 60 [ D.3679 ])
        (subreg:SI (reg:DI 65) 0)) bitcnts.c:97 -1
     (nil))
(insn 14 13 15 4 (parallel [
            (set (reg:SI 61 [ D.3679 ])
                (and:SI (reg:SI 60 [ D.3679 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 -1
     (nil))
(insn 15 14 16 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])
                    (reg:SI 61 [ D.3679 ])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:97 -1
     (nil))
(insn 16 15 17 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 -1
     (nil))
(insn 17 16 18 4 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                (ashiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) bitcnts.c:96 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 18 17 19 5 11 "" [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [0 x+0 S8 A64])
            (const_int 0 [0]))) bitcnts.c:96 -1
     (nil))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) bitcnts.c:96 -1
     (nil)
 -> 27)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 25 6 (set (reg:SI 59 [ i.1 ])
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) bitcnts.c:96 -1
     (nil))
(insn 25 23 26 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 59 [ i.1 ])
            (const_int 63 [0x3f]))) bitcnts.c:96 -1
     (nil))
(jump_insn 26 25 27 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) bitcnts.c:96 -1
     (nil)
 -> 24)
;;  succ:       4
;;              7 (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 27 26 28 7 12 "" [1 uses])
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 32 7 (set (reg:SI 62 [ D.3679 ])
        (mem/c:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S4 A32])) bitcnts.c:98 -1
     (nil))
(insn 32 29 36 7 (set (reg:SI 63 [ <retval> ])
        (reg:SI 62 [ D.3679 ])) bitcnts.c:98 -1
     (nil))
(insn 36 32 39 7 (set (reg/i:SI 0 ax)
        (reg:SI 63 [ <retval> ])) bitcnts.c:99 -1
     (nil))
(insn 39 36 0 7 (use (reg/i:SI 0 ax)) bitcnts.c:99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

